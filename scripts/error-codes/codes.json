{
  "0": "Listener for type \"command\" requires a \"priority\".",
  "1": "registerCommand: Command %s not found in command map",
  "2": "Node %s has not been registered. Ensure node has been passed to createEditor.",
  "3": "setEditorState: the editor state is empty. Ensure the editor state's root node never becomes empty.",
  "4": "registeredNode: Type %s not found",
  "5": "$setSelection called on frozen selection object. Ensure selection is cloned before passing in.",
  "6": "Type %s not in registeredNodes",
  "7": "Reconciliation: could not find DOM element for node key %s",
  "8": "window object not found",
  "9": "$initializeNode failed. Ensure node has been registered to the editor. You can do this by passing the node class via the \"nodes\" array in the editor config.",
  "10": "$initializeNode failed. Ensure replacement node is a subclass of the original node.",
  "11": "Only element or decorator nodes can be inserted in to the root node",
  "12": "Expected node with key %s to exist but it's not in the nodeMap.",
  "13": "Can not call $splitNode() on root element",
  "14": "Children of a root must be ElementNode",
  "15": "Point.getNode: node not found",
  "16": "insertText: first node is not a text node",
  "17": "Expected RangeSelection after insertParagraph",
  "18": "Expected 'firstBlock' to be an ElementNode",
  "19": "Expected ancestor to be an ElementNode",
  "20": "Unexpected dirty selection to be null",
  "21": "Cannot use method in read-only mode.",
  "22": "One or more transforms are endlessly triggering additional transforms. May have encountered infinite recursion caused by transforms that have their preconditions too lose and/or conflict with each other.",
  "23": "Unable to find an active editor state. State helpers or node methods can only be used synchronously during the callback of editor.update() or editorState.read().",
  "24": "Unable to find an active editor. This method can only be used synchronously during the callback of editor.update().",
  "25": "parseEditorState: type \"%s\" + not found",
  "26": "LexicalNode: Node %s does not implement .importJSON().",
  "27": "updateEditor: selection has been lost because the previously selected nodes have been removed and selection wasn't moved to another node. Ensure selection changes after removing/replacing a selected node.",
  "28": "Expected node %s to have a first child.",
  "29": "Expected node %s to have a last child.",
  "30": "splice: sibling not found",
  "31": "append: attempting to append self",
  "32": "getTopLevelElementOrThrow: root nodes are not top level elements",
  "33": "remove: cannot be called on root nodes",
  "34": "replace: cannot be called on root nodes",
  "35": "insertBefore: cannot be called on root nodes",
  "36": "insertAfter: cannot be called on root nodes",
  "37": "rootNode.append: Only element or decorator nodes can be appended to the root node",
  "38": "TabNode does not support setTextContent",
  "39": "TabNode does not support setDetail",
  "40": "TabNode does not support setMode",
  "41": "decorate: base method not extended",
  "42": "updateDOM: prevInnerDOM is null or undefined",
  "43": "updateDOM: innerDOM is null or undefined",
  "44": "Expected TextNode createDOM to always return a HTMLElement",
  "45": "mergeWithSibling: sibling must be a previous or next sibling",
  "46": "Expected parentElement of Text not to be null",
  "47": "LexicalNode: Node %s does not match the serialized type. Check if .exportJSON() is implemented and it is returning the correct type.",
  "48": "LexicalNode: Node %s is an element but .exportJSON() does not have a children array.",
  "49": "Point.getNode() must return TextNode when type is text",
  "50": "Anchor node must be a TextNode",
  "51": "Root element not registered",
  "52": "LexicalNode: Node %s does not implement .getType().",
  "53": "LexicalNode: Node %s does not implement .clone().",
  "54": "LexicalNode: Node %s does not implement .isInline().",
  "55": "Expected node %s to have a parent.",
  "56": "Children of root nodes must be elements",
  "57": "Expected node %s to have a top parent element.",
  "58": "getNodesBetween: ancestor is null",
  "59": "Lexical node does not exist in active editor state. Avoid using the same node references between nested closures from editorState.read/editor.update.",
  "60": "createDOM: base method not extended",
  "61": "updateDOM: base method not extended",
  "62": "exportJSON: base method not extended",
  "63": "includeChildren should only be true for ElementNodes",
  "64": "Create node: Attempted to create node %s that was not configured to be used on the editor.",
  "65": "Create node: Type %s in node %s does not match registered node %s with the same type",
  "66": "insertRangeAfter: lastToInsert must be a later sibling of firstToInsert",
  "67": "createNode: node does not exist in nodeMap",
  "68": "createChildrenArray: node does not exist in nodeMap",
  "69": "reconcileNode: prevNode or nextNode does not exist in nodeMap",
  "70": "reconcileNode: parentDOM is null",
  "71": "Expected valid LexicalSelection",
  "72": "LexicalNode: Node %s does not implement .exportJSON().",
  "73": "Expected a valid Code Node: CodeHighlightNode, TabNode, LineBreakNode",
  "74": "Unexpected lineBreakNode in getEndOfCodeInLine",
  "75": "Expected selection to be inside CodeBlock and consisting of CodeHighlightNode, TabNode and LineBreakNode",
  "76": "Expected selection firstNode to be CodeHighlightNode or TabNode",
  "77": "Expected selection firstNode to be CodeHighlightNode or CodeTabNode",
  "78": "Expected getFirstCodeNodeOfLine to return a valid Code Node",
  "79": "Unable to find an active editor state. State helpers or node methods can only be used synchronously during the callback of editor.update() or editorState.read().This issue can also occur if you have a mismatching or more than one copy of lexical in the same app.",
  "80": "Unable to find an active editor. This method can only be used synchronously during the callback of editor.update().This issue can also occur if you have a mismatching or more than one copy of lexical in the same app."
}
